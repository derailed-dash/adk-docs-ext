# adk-docs Sitemap

The Agent Development Kit (ADK) is a comprehensive, open-source framework designed to streamline the development, evaluation, and deployment of AI agents in both Python and Java. It emphasizes a code-first approach, offering modularity, flexibility, and compatibility with various models and deployment environments like Google Cloud's Vertex AI Agent Engine, Cloud Run, and GKE. ADK provides core primitives such as Agents (LLM, Workflow, Custom), Tools (Function, Built-in, Third-Party, OpenAPI, Google Cloud, MCP), Callbacks, Session Management, Memory, Artifact Management, and a robust Runtime with an Event Loop for orchestrating complex workflows. 

The documentation covers a wide array of functionalities, from basic agent creation and local testing using the Dev UI and CLI, to advanced topics like multi-agent system design, authentication for tools, and performance optimization through parallel execution. It also delves into crucial aspects of agent development such as observability with integrations like AgentOps, Cloud Trace, Phoenix, and Weave, and implementing strong safety and security guardrails using callbacks and plugins. Furthermore, ADK supports grounding capabilities with Google Search and Vertex AI Search for accurate, real-time information retrieval.

Overall, the ADK aims to empower developers to build sophisticated, context-aware, and reliable AI applications. The provided tutorials and quickstarts guide users through progressive learning, enabling them to master agent composition, state management, and deployment strategies for diverse use cases, ensuring agents can operate effectively and securely in production environments.


## Home

- [CONTRIBUTING.md](https://github.com/google/adk-docs/blob/main/CONTRIBUTING.md): Outlines the process for contributing to the project, emphasizing the Contributor License Agreement (CLA) and community guidelines. It details the contribution workflow, including finding issues, setting up the development environment, and the code review process. Instructions cover cloning the repository, setting up a virtual environment, installing dependencies, and running a local development server.
- [README.md](https://github.com/google/adk-docs/blob/main/README.md): Provides a high-level overview of the Agent Development Kit (ADK), an open-source, code-first toolkit for building AI agents. It highlights key features like a rich tool ecosystem, modular multi-agent systems, and deployment flexibility. The document also includes installation instructions for Python and Java, links to comprehensive documentation, and contributing guidelines.

## Docs

- [community.md](https://github.com/google/adk-docs/blob/main/docs/community.md): Lists various community resources for the Agent Development Kit (ADK), including video tutorials, courses, and blog series. It categorizes resources by 'Getting Started', 'Courses & Deep Dives', 'Agent Tutorials and Demos', and 'ADK for Java'. The page also mentions community-provided translations and explains how to contribute new resources.
- [contributing-guide.md](https://github.com/google/adk-docs/blob/main/docs/contributing-guide.md): Details how to contribute to the Agent Development Kit (ADK) across its various repositories for Python, Java, documentation, and web components. It outlines prerequisites such as signing a Contributor License Agreement and reviewing community guidelines. The guide also explains how to report issues, suggest enhancements, improve documentation, and contribute code through pull requests.
- [index.md](https://github.com/google/adk-docs/blob/main/docs/index.md): Serves as the main landing page for the Agent Development Kit (ADK), describing it as a flexible, modular framework for building and deploying AI agents. It highlights key features like flexible orchestration, multi-agent systems, rich tool ecosystem, deployment readiness, and built-in evaluation. The page provides quick installation commands for Python and Java, along with links to detailed documentation and a YouTube introduction video.

## Docs A2A

- [index.md](https://github.com/google/adk-docs/blob/main/docs/a2a/index.md): Provides a comprehensive guide to building multi-agent systems in ADK using the Agent2Agent (A2A) Protocol. It includes an introduction to A2A, quickstarts for exposing and consuming remote agents, and a link to the official A2A Protocol website. The section aims to enable secure and efficient communication and collaboration between agents.
- [intro.md](https://github.com/google/adk-docs/blob/main/docs/a2a/intro.md): Introduces the Agent2Agent (A2A) Protocol as a standard for specialized agents to communicate and collaborate in complex systems. It clarifies when to use A2A versus local sub-agents, providing concrete examples for each. The document also visualizes the A2A workflow for exposing and consuming agents, and illustrates a practical use case with customer service and product catalog agents.
- [quickstart-consuming.md](https://github.com/google/adk-docs/blob/main/docs/a2a/quickstart-consuming.md): Provides a quickstart guide on how an ADK agent can consume a remote agent via the Agent2Agent (A2A) Protocol for complex tasks. It outlines the architecture of a root agent, local sub-agent, and remote A2A agent. The guide details how to expose a remote agent using `adk api_server --a2a` and how the main agent configures a `RemoteA2aAgent` to interact with it.
- [quickstart-exposing.md](https://github.com/google/adk-docs/blob/main/docs/a2a/quickstart-exposing.md): Provides a quickstart guide on exposing an ADK agent via the Agent2Agent (A2A) Protocol, allowing other agents to use it. It focuses on using the `to_a2a()` function for easy conversion and auto-generation of agent cards. The guide includes steps for setting up a remote agent server and verifying its operation.

## Docs Agents

- [config.md](https://github.com/google/adk-docs/blob/main/docs/agents/config.md): Describes the ADK Agent Config feature, allowing users to build and run ADK workflows using YAML-formatted text files without writing code. It covers setup, building an agent by editing `root_agent.yaml`, and running agents via web interface, command line, or API server. The document provides examples for built-in tools, custom tools, and sub-agents, and lists known limitations.
- [custom-agents.md](https://github.com/google/adk-docs/blob/main/docs/agents/custom-agents.md): Explains how to build custom agents in ADK by inheriting directly from `BaseAgent` and implementing unique asynchronous orchestration logic. It details the `_run_async_impl` method (or `runAsyncImpl` in Java) for controlling sub-agent calls, managing state, and handling events. The document provides a `StoryFlowAgent` example to illustrate complex, conditional workflows.
- [index.md](https://github.com/google/adk-docs/blob/main/docs/agents/index.md): Provides an overview of agent types in the Agent Development Kit (ADK), defining an agent as a self-contained execution unit for specific goals. It categorizes agents into LLM Agents (for reasoning), Workflow Agents (for execution flow control), and Custom Agents (for unique logic). The document emphasizes combining these types for sophisticated multi-agent systems.
- [llm-agents.md](https://github.com/google/adk-docs/blob/main/docs/agents/llm-agents.md): Describes `LlmAgent` as a core ADK component that leverages Large Language Models for reasoning, natural language understanding, and tool interaction. It explains how to define an agent's identity (`name`, `description`, `model`), guide its behavior with `instruction`, and equip it with `tools`. The document also covers advanced configurations like `generate_content_config`, `input_schema`, `output_schema`, `output_key`, `include_contents`, planners, and code execution.
- [models.md](https://github.com/google/adk-docs/blob/main/docs/agents/models.md): Explains how to integrate various Large Language Models (LLMs) with ADK, including Google Gemini, Anthropic, and open-source/local models via LiteLLM. It details authentication methods for Google AI Studio and Google Cloud Vertex AI, including Express Mode and Service Accounts. The document also covers using hosted and tuned models on Vertex AI and third-party models on Vertex AI.
- [multi-agents.md](https://github.com/google/adk-docs/blob/main/docs/agents/multi-agents.md): Explains how to build complex multi-agent systems in ADK by composing multiple `BaseAgent` instances, emphasizing modularity, specialization, and reusability. It details ADK primitives for agent composition, including hierarchy (parent/sub-agents), workflow agents (Sequential, Parallel, Loop), and interaction mechanisms like shared session state and LLM-driven delegation. The document also covers common multi-agent design patterns.
- [index.md](https://github.com/google/adk-docs/blob/main/docs/agents/workflow-agents/index.md): Introduces workflow agents in ADK as specialized components designed to control the execution flow of their sub-agents in predictable, deterministic patterns. It outlines three core types: Sequential Agents, Loop Agents, and Parallel Agents. The document explains why workflow agents are essential for predictability, reliability, and structure in complex processes.
- [loop-agents.md](https://github.com/google/adk-docs/blob/main/docs/agents/workflow-agents/loop-agents.md): Describes `LoopAgent` as a workflow agent in ADK that iteratively executes its sub-agents until a termination condition is met or a maximum number of iterations is reached. It explains how the loop agent works, emphasizing the need for explicit termination mechanisms. The document provides an example of iterative document improvement and notes that workflow agents are deterministic.
- [parallel-agents.md](https://github.com/google/adk-docs/blob/main/docs/agents/workflow-agents/parallel-agents.md): Describes `ParallelAgent` as a workflow agent in ADK that executes its sub-agents concurrently to speed up workflows with independent tasks. It explains how concurrent execution works, emphasizing independent branches and result collection. The document provides an example of parallel web research and discusses state management for sub-agents.
- [sequential-agents.md](https://github.com/google/adk-docs/blob/main/docs/agents/workflow-agents/sequential-agents.md): Describes `SequentialAgent` as a workflow agent in ADK that executes its sub-agents in a fixed, strict order. It explains how the agent iterates through its sub-agents, calling each one's `Run Async` method. The document provides a code development pipeline example and highlights the use of shared `InvocationContext` for data passing between sub-agents.

## Docs Api-Reference

- [index.md](https://github.com/google/adk-docs/blob/main/docs/api-reference/index.md): Provides a central hub for API references for the Agent Development Kit (ADK), covering both Python and Java SDKs. It also includes references for the Command Line Interface (CLI), Agent Config YAML format, and the REST API. This page serves as a comprehensive guide to all available classes, methods, and functionalities.
- [dejavufonts.md](https://github.com/google/adk-docs/blob/main/docs/api-reference/java/legal/dejavufonts.md): Provides license information for DejaVu fonts v2.37, specifying that the fonts are copyrighted by Bitstream and DejaVu changes are in the public domain. It also includes copyright details for glyphs imported from Arev fonts. The document outlines permissions for reproduction and distribution, along with restrictions on renaming modified fonts.
- [jquery.md](https://github.com/google/adk-docs/blob/main/docs/api-reference/java/legal/jquery.md): Contains the license information for jQuery v3.7.1, detailing the MIT License under which the software is distributed. It specifies conditions for use, copy, modification, merge, publish, distribution, sublicense, and sale of the software. The license also disclaims warranties and liabilities.
- [jqueryUI.md](https://github.com/google/adk-docs/blob/main/docs/api-reference/java/legal/jqueryUI.md): Contains the license information for jQuery UI v1.13.2, detailing the MIT License under which the software is distributed. It specifies conditions for use, modification, and redistribution, and notes that sample code is waived via CC0. The document also mentions that externally maintained libraries have their own licenses.
- [index.md](https://github.com/google/adk-docs/blob/main/docs/api-reference/rest/index.md): Provides a reference for the REST API exposed by the ADK web server, detailing endpoints like `/run` and `/run_sse` for executing agent runs. It describes request and response body structures, including `Content` and `Event` objects. The document also mentions interactive API documentation available at `/docs` for exploration and testing.

## Docs Artifacts

- [index.md](https://github.com/google/adk-docs/blob/main/docs/artifacts/index.md): Explains artifacts in ADK as a crucial mechanism for managing named, versioned binary data associated with user interaction sessions or persistently with a user. It defines artifacts as `google.genai.types.Part` objects containing raw binary content and MIME types, managed by a dedicated `Artifact Service`. The document covers use cases, core concepts like `BaseArtifactService`, data representation, filenames, versioning, and namespacing, along with interaction methods via context objects.

## Docs Callbacks

- [design-patterns-and-best-practices.md](https://github.com/google/adk-docs/blob/main/docs/callbacks/design-patterns-and-best-practices.md): Outlines design patterns and best practices for effectively using callbacks in ADK to enhance or control agent behavior. It covers patterns for guardrails, dynamic state management, logging, caching, request/response modification, conditional skipping, and tool-specific actions. The document also provides guidelines for performance, error handling, reliability, testing, and documentation of callbacks.
- [index.md](https://github.com/google/adk-docs/blob/main/docs/callbacks/index.md): Introduces callbacks as a cornerstone feature of ADK, providing a powerful mechanism to observe, customize, and control an agent's execution process. It explains what callbacks are, why they are used (observability, control, guardrails, state management), and how their return values influence the agent's flow. The document outlines different callback types for agent lifecycle, LLM interaction, and tool execution.
- [types-of-callbacks.md](https://github.com/google/adk-docs/blob/main/docs/callbacks/types-of-callbacks.md): Details the various types of callbacks available in ADK, categorizing them into Agent Lifecycle, LLM Interaction, and Tool Execution callbacks. It explains when each callback fires, its purpose, and the effect of its return value on the agent's execution flow. Code examples illustrate how to implement `before_agent_callback`, `after_agent_callback`, `before_model_callback`, `after_model_callback`, `before_tool_callback`, and `after_tool_callback`.

## Docs Context

- [index.md](https://github.com/google/adk-docs/blob/main/docs/context/index.md): Explains the concept of "context" in ADK as the crucial information bundle available to agents and tools during operations. It details different context objects: `InvocationContext` (comprehensive), `ReadonlyContext` (read-only view), `CallbackContext` (for agent/model callbacks), and `ToolContext` (for tool functions/callbacks), outlining their contents and use cases for tasks like accessing information, managing state, artifacts, authentication, and memory.

## Docs Deploy

- [agent-engine.md](https://github.com/google/adk-docs/blob/main/docs/deploy/agent-engine.md): Guides users through deploying ADK agents to Vertex AI Agent Engine, a fully managed Google Cloud service for scaling AI agents. It presents two deployment methods: an accelerated path using the Agent Starter Pack (ASP) and a standard step-by-step approach. The document covers prerequisites, project preparation, Google Cloud connection, and testing of deployed agents, including REST and Python SDK interactions.
- [cloud-run.md](https://github.com/google/adk-docs/blob/main/docs/deploy/cloud-run.md): Explains how to deploy ADK agents to Google Cloud Run, a fully managed serverless platform. It offers two deployment options: using the `adk deploy cloud_run` CLI command (recommended for Python) or the standard `gcloud run deploy` command with a Dockerfile for both Python and Java. The guide includes code examples for agent setup, environment variables, project structure, and testing the deployed agent via UI or API.
- [gke.md](https://github.com/google/adk-docs/blob/main/docs/deploy/gke.md): Provides comprehensive instructions for deploying ADK agents to Google Kubernetes Engine (GKE), covering both manual and automated deployment methods. It details environment variable setup, API enablement, and IAM permissions required for GKE. The guide includes code examples for creating a GKE cluster, building a container image, configuring Kubernetes manifests, and testing the deployed agent.
- [index.md](https://github.com/google/adk-docs/blob/main/docs/deploy/index.md): Provides an overview of deployment options for ADK agents, enabling users to move their tested agents to scalable and reliable environments. It highlights Agent Engine in Vertex AI, Cloud Run, and Google Kubernetes Engine (GKE) as primary deployment targets. The document also mentions the possibility of deploying to other container-friendly infrastructures like Docker or Podman.

## Docs Evaluate

- [criteria.md](https://github.com/google/adk-docs/blob/main/docs/evaluate/criteria.md): Outlines the evaluation criteria provided by ADK to assess agent performance, covering tool use trajectory, response quality, and safety. Criteria include `tool_trajectory_avg_score`, `response_match_score`, `final_response_match_v2`, `rubric_based_final_response_quality_v1`, `rubric_based_tool_use_quality_v1`, `hallucinations_v1`, and `safety_v1`. It explains when to use each criterion, its details, usage, and interpretation of output scores.
- [index.md](https://github.com/google/adk-docs/blob/main/docs/evaluate/index.md): Explains the critical importance of agent evaluations in ADK for progressing beyond prototypes to production-ready AI agents, emphasizing the need for qualitative assessment of both final output and agent trajectory. It details two approaches for evaluation: using individual test files for unit testing and evalset files for integration tests, along with available evaluation criteria. The document also covers running evaluations via web UI, `pytest`, or CLI, and debugging with the trace view.

## Docs Events

- [index.md](https://github.com/google/adk-docs/blob/main/docs/events/index.md): Explains that Events are fundamental units of information flow in ADK, representing occurrences during an agent's interaction lifecycle. It details the `Event` object's structure, including `author`, `invocation_id`, `id`, `timestamp`, and `actions` for side-effects and control flow. The document describes how to identify event origin and type, extract key information (text, function calls/responses), detect actions/side effects (state/artifact changes, control signals), and determine if an event is a "final" response.

## Docs Get-Started

- [about.md](https://github.com/google/adk-docs/blob/main/docs/get-started/about.md): Provides an overview of the Agent Development Kit (ADK), designed to empower developers to build, manage, evaluate, and deploy AI-powered agents. It outlines core concepts like Agents, Tools, Callbacks, Session Management, and Memory. The document highlights key capabilities such as multi-agent system design, rich tool ecosystem, flexible orchestration, and native streaming support.
- [index.md](https://github.com/google/adk-docs/blob/main/docs/get-started/index.md): Provides quickstart guides for the Agent Development Kit (ADK), designed to help developers quickly build, manage, evaluate, and deploy AI-powered agents. It offers separate quickstarts for Python and Java, aiming to get users set up and running a simple agent in under 20 minutes.
- [installation.md](https://github.com/google/adk-docs/blob/main/docs/get-started/installation.md): Provides installation instructions for the Agent Development Kit (ADK) in both Python and Java environments. For Python, it recommends creating and activating a virtual environment before installing the `google-adk` package. For Java, it details adding `google-adk` and `google-adk-dev` dependencies using Maven or Gradle.
- [java.md](https://github.com/google/adk-docs/blob/main/docs/get-started/java.md): Provides a Java quickstart guide for the Agent Development Kit (ADK), covering project setup, agent definition, and running agents. It details creating a Maven project structure, defining an agent with a `FunctionTool`, configuring project dependencies, setting API keys, and executing agents via a command-line interface or the ADK web interface.
- [python.md](https://github.com/google/adk-docs/blob/main/docs/get-started/python.md): Provides a Python quickstart guide for the Agent Development Kit (ADK), covering installation, project creation, and running agents. It details setting up a virtual environment, creating an agent project with `adk create`, configuring API keys, and executing agents via the command-line interface (`adk run`) or web interface (`adk web`).
- [quickstart.md](https://github.com/google/adk-docs/blob/main/docs/get-started/quickstart.md): A quickstart guide for building a multi-tool agent using the Agent Development Kit (ADK), covering environment setup, project structure, and model configuration. It details how to install ADK, create an agent project with `agent.py` and `.env` files, and run the agent locally using the Dev UI or terminal. The guide emphasizes setting up API keys for LLM authentication.
- [index.md](https://github.com/google/adk-docs/blob/main/docs/get-started/streaming/index.md): Introduces building streaming agents with the Agent Development Kit (ADK) for real-time, interactive AI experiences. It provides quickstart examples for both Python and Java ADK, demonstrating how to enable features like live voice conversations and real-time tool use.
- [quickstart-streaming-java.md](https://github.com/google/adk-docs/blob/main/docs/get-started/streaming/quickstart-streaming-java.md): A Java quickstart guide for building a streaming agent with ADK, focusing on low-latency bidirectional voice interactions. It covers project setup, Maven dependencies, creating a `ScienceTeacherAgent`, and running it with the Dev UI for text, voice, and video. The guide also details creating a custom live audio application for the agent.
- [quickstart-streaming.md](https://github.com/google/adk-docs/blob/main/docs/get-started/streaming/quickstart-streaming.md): A Python quickstart guide for building a streaming agent with ADK, enabling low-latency bidirectional voice and video communication. It covers environment setup, ADK installation, project structure with a Google Search agent, and platform configuration (Google AI Studio or Vertex AI). The guide demonstrates running the agent with `adk web` for text, voice, and video interactions.
- [testing.md](https://github.com/google/adk-docs/blob/main/docs/get-started/testing.md): Explains how to test ADK agents locally using the ADK API server (`adk api_server`), which launches a FastAPI web server. It covers creating sessions, sending queries via `/run` or `/run_sse` endpoints, and interpreting responses. The document also highlights debugging with interactive API documentation and integrations with third-party observability tools.

## Docs Grounding

- [google_search_grounding.md](https://github.com/google/adk-docs/blob/main/docs/grounding/google_search_grounding.md): Explains Google Search Grounding in ADK, a feature enabling AI agents to access real-time, authoritative web information for accurate and current responses. It covers quick setup, grounding architecture, response structure, and best practices for displaying search results and citations. The document provides a quickstart guide for creating a Google Search-enabled agent and details the data flow for grounded responses.
- [vertex_ai_search_grounding.md](https://github.com/google/adk-docs/blob/main/docs/grounding/vertex_ai_search_grounding.md): Explains Vertex AI Search Grounding in ADK, a feature enabling AI agents to access information from private enterprise documents and data repositories. It covers quick setup, grounding architecture, response structure, and best practices for displaying citations. The document provides a quickstart guide for creating a Vertex AI Search-enabled agent and details the data flow for grounded responses.

## Docs Mcp

- [index.md](https://github.com/google/adk-docs/blob/main/docs/mcp/index.md): Introduces the Model Context Protocol (MCP) as an open standard for LLM communication with external applications, data sources, and tools. It explains MCP's client-server architecture and how ADK facilitates both using and exposing MCP tools. The document also highlights the MCP Toolbox for Databases, an open-source MCP server for secure data access, and mentions FastMCP and MCP Servers for Google Cloud Genmedia.

## Docs Observability

- [agentops.md](https://github.com/google/adk-docs/blob/main/docs/observability/agentops.md): Describes integrating AgentOps with Google ADK for enhanced agent observability, including session replays, metrics, and monitoring. It highlights AgentOps' benefits over ADK's native tracing, such as unified tracing, rich visualization, detailed debugging, and cost/latency tracking. The document provides straightforward installation and initialization steps, explaining how AgentOps instruments ADK by neutralizing native telemetry and controlling span creation.
- [arize-ax.md](https://github.com/google/adk-docs/blob/main/docs/observability/arize-ax.md): Describes how to integrate Agent Development Kit (ADK) with Arize AX for LLM application observability. It explains how Arize AX automatically collects traces for agent interactions, tool calls, and model requests, enabling performance evaluation, debugging, and production monitoring. The document provides installation instructions, environment variable setup, and code examples for connecting an ADK application to Arize AX.
- [cloud-trace.md](https://github.com/google/adk-docs/blob/main/docs/observability/cloud-trace.md): Explains how to integrate Agent Development Kit (ADK) with Google Cloud Trace for agent observability. It details how Cloud Trace, built on OpenTelemetry, enables comprehensive tracing of agent interactions, debugging latency issues, and visualizing execution flows. The document provides setup instructions for Agent Engine and Cloud Run deployments, as well as customized setups, and guides on inspecting traces in the Cloud Trace Explorer.
- [logging.md](https://github.com/google/adk-docs/blob/main/docs/observability/logging.md): Explains how the Agent Development Kit (ADK) uses Python's standard `logging` module for flexible and powerful logging. It covers configuring logging levels (DEBUG, INFO, WARNING, ERROR, CRITICAL) programmatically and via the `adk CLI` commands. The document details how to read and understand ADK logs, providing a practical example for debugging agent behavior by analyzing LLM request prompts.
- [phoenix.md](https://github.com/google/adk-docs/blob/main/docs/observability/phoenix.md): Describes how to integrate Google ADK with Phoenix, an open-source, self-hosted observability platform for LLM applications and AI Agents. It explains that Phoenix automatically collects traces from ADK using OpenInference instrumentation, enabling tracing, performance evaluation, and debugging. The document provides installation and setup instructions for Phoenix Cloud, along with a code example for observing agent interactions.
- [weave.md](https://github.com/google/adk-docs/blob/main/docs/observability/weave.md): Describes how to integrate Google ADK with Weave by Weights & Biases (WandB) for logging and visualizing model calls and OpenTelemetry traces. It outlines prerequisites, installation steps, and how to configure OpenTelemetry to send ADK traces to the Weave dashboard. The document includes a Python code example for a math agent using a calculator tool and provides notes on environment variables and project configuration.

## Docs Plugins

- [index.md](https://github.com/google/adk-docs/blob/main/docs/plugins/index.md): Describes plugins in ADK as custom code modules executed at various stages of an agent workflow lifecycle using callback hooks. It highlights typical applications like logging, policy enforcement, monitoring, caching, and request/response modification. The document explains how plugins work, how to define and register them, and details various callback hooks for user messages, runner events, agent execution, model calls, and tool calls.

## Docs Runtime

- [index.md](https://github.com/google/adk-docs/blob/main/docs/runtime/index.md): Introduces the ADK Runtime as the underlying engine orchestrating agent applications, built around an event loop for managing information flow, state changes, and interactions. It details the roles of the `Runner`, Execution Logic Components (Agents, Tools, Callbacks), `Event` objects, `Services` (Session, Artifact, Memory), `Session`, and `Invocation`. The document also explains important runtime behaviors like state updates and streaming output.
- [resume.md](https://github.com/google/adk-docs/blob/main/docs/runtime/resume.md): Explains ADK's Resume feature, allowing agent workflows to pick up after interruptions by tracking execution events and states. It details how to configure resumability for agent workflows and custom agents. The document also covers how to resume a stopped workflow using an Invocation ID and explains the behavior for multi-agent workflows like Sequential, Loop, and Parallel Agents.
- [runconfig.md](https://github.com/google/adk-docs/blob/main/docs/runtime/runconfig.md): Defines the `RunConfig` class in ADK, which controls runtime behavior and options for agents, including speech and streaming settings, function calling, artifact saving, and LLM call limits. It details various parameters like `speech_config`, `response_modalities`, and `streaming_mode`, providing examples for basic, streaming, and speech-enabled configurations. The document also covers validation rules for these parameters.

## Docs Safety

- [index.md](https://github.com/google/adk-docs/blob/main/docs/safety/index.md): Provides an overview of safety and security for AI agents in ADK, focusing on mitigating risks like misalignment and harmful content generation. It outlines a multi-layered approach including identity and authorization, guardrails (in-tool, Gemini safety features, callbacks, plugins, Gemini as a safety guardrail), sandboxed code execution, evaluation/tracing, and network controls. The document also discusses sources and categories of risk, and best practices for secure agent design.

## Docs Sessions

- [express-mode.md](https://github.com/google/adk-docs/blob/main/docs/sessions/express-mode.md): Details how to use Vertex AI Express Mode to access `VertexAiSessionService` and `VertexAiMemoryBankService` for free with an eligible Gmail account. It explains how to create an Agent Engine instance in Express Mode to manage sessions and memories. The document also outlines quotas for free Express Mode projects and provides code samples for configuration.
- [index.md](https://github.com/google/adk-docs/blob/main/docs/sessions/index.md): Introduces the core concepts of conversational context in ADK: `Session`, `State`, and `Memory`, essential for enabling meaningful multi-turn interactions. `Session` tracks individual conversation threads, `State` manages temporary data within a session, and `Memory` provides searchable, cross-session information. The document explains how `SessionService` and `MemoryService` manage these concepts, with various implementations for different persistence and scalability needs.
- [memory.md](https://github.com/google/adk-docs/blob/main/docs/sessions/memory.md): Describes the `MemoryService` in ADK for managing long-term knowledge, allowing agents to recall information across multiple sessions. It contrasts `InMemoryMemoryService` for prototyping with `VertexAiMemoryBankService` for persistent, sophisticated memory capabilities. The document explains how to add session content to memory, search for information, and integrate memory retrieval tools into agents.
- [session.md](https://github.com/google/adk-docs/blob/main/docs/sessions/session.md): Introduces the `Session` object in ADK as the core mechanism for tracking individual conversation threads, holding identification, history, state, and activity tracking information. It explains that `SessionService` manages the lifecycle of these sessions, including creation, retrieval, saving progress, listing, and deletion. The document details different `SessionService` implementations like `InMemorySessionService`, `VertexAiSessionService`, and `DatabaseSessionService`, tailored for various persistence needs.
- [state.md](https://github.com/google/adk-docs/blob/main/docs/sessions/state.md): Explains the `state` attribute within ADK sessions, functioning as a scratchpad for agents to store dynamic conversation details. It details state characteristics like serializable key-value pairs, mutability, and persistence based on the `SessionService` implementation. The document also describes organizing state with prefixes (`user:`, `app:`, `temp:`) and recommended methods for updating it, cautioning against direct modification of `Session` objects.

## Docs Streaming

- [configuration.md](https://github.com/google/adk-docs/blob/main/docs/streaming/configuration.md): Explains how to configure streaming behavior for live agents in ADK using the `RunConfig` class. It details parameters such as `speech_config`, `response_modalities`, `save_input_blobs_as_artifacts`, `streaming_mode`, `output_audio_transcription`, and `max_llm_calls`. The document provides examples for basic, streaming, and speech-enabled configurations.
- [custom-streaming-ws.md](https://github.com/google/adk-docs/blob/main/docs/streaming/custom-streaming-ws.md): Overviews the server and client code for a custom asynchronous web application built with ADK Streaming and FastAPI, enabling real-time, bidirectional audio and text communication via WebSockets. It covers installation, platform setup (Google AI Studio or Vertex AI), agent definition, and interaction with the streaming app. The document also details server-side logic for agent session management and client-side audio handling.
- [custom-streaming.md](https://github.com/google/adk-docs/blob/main/docs/streaming/custom-streaming.md): Overviews the server and client code for a custom asynchronous web app built with ADK Streaming and FastAPI, enabling real-time, bidirectional audio and text communication using Server-Sent Events (SSE). It covers installation, platform setup (Google AI Studio or Vertex AI), agent definition, and interaction with the streaming app. The document details server-side logic for agent session management and client-side audio handling.
- [part1.md](https://github.com/google/adk-docs/blob/main/docs/streaming/dev-guide/part1.md): Part 1 of the ADK Bidi-streaming development guide introduces the concept of bidirectional streaming for AI agent communication, emphasizing real-time, two-way interaction with responsive interruption. It differentiates bidi-streaming from other streaming types and outlines real-world applications. The guide also provides detailed instructions for setting up the development environment, including virtual environments, ADK installation, and API keys.
- [index.md](https://github.com/google/adk-docs/blob/main/docs/streaming/index.md): Introduces bidirectional streaming (live) in ADK, enabling low-latency voice and video interaction with AI agents using the Gemini Live API. It highlights the capability for users to interrupt agent responses and process multimodal inputs. The page provides quickstart guides for Python and Java, custom audio streaming app samples, and a development guide series.
- [streaming-tools.md](https://github.com/google/adk-docs/blob/main/docs/streaming/streaming-tools.md): Describes streaming tools in ADK, which allow tools to stream intermediate results back to agents for real-time reactions. It outlines the requirements for defining streaming tools (asynchronous functions returning `AsyncGenerator`). The document provides examples of tools for monitoring stock prices and video streams, and explains how to stop streaming functions.

## Docs Tools

- [authentication.md](https://github.com/google/adk-docs/blob/main/docs/tools/authentication.md): Explains how to manage authentication for tools in ADK, covering core concepts like `AuthScheme` and `AuthCredential`. It details supported initial credential types and how to configure authentication for various toolsets. The document also outlines the interactive OAuth/OIDC flow, from detecting auth requests to handling redirects and token exchange, and provides guidance for building custom authenticated tools.
- [built-in-tools.md](https://github.com/google/adk-docs/blob/main/docs/tools/built-in-tools.md): Details built-in tools in ADK that provide ready-to-use functionality such as Google Search, Code Execution, Vertex AI RAG Engine, and various Google Cloud database tools. It explains how to import, configure, and register these tools with an agent. The document also highlights limitations, such as the current restriction of one built-in tool per root agent and issues with sub-agents.
- [confirmation.md](https://github.com/google/adk-docs/blob/main/docs/tools/confirmation.md): Describes the Tool Confirmation feature in ADK, which allows an ADK Tool to pause its execution and request confirmation or structured data from a human or supervising system. It covers Boolean Confirmation for simple yes/no responses and Advanced Confirmation for more complex data. The document also explains remote confirmation via REST API and lists known limitations.
- [function-tools.md](https://github.com/google/adk-docs/blob/main/docs/tools/function-tools.md): Describes how to create custom function tools in ADK to integrate tailored logic into agents, including standard Function Tools, Long Running Function Tools, and Agents-as-a-Tool. It details how to define function signatures with required/optional parameters and docstrings for effective LLM interpretation. The document also covers best practices for tool design and passing data between tools using session state.
- [google-cloud-tools.md](https://github.com/google/adk-docs/blob/main/docs/tools/google-cloud-tools.md): Describes how to integrate ADK agents with Google Cloud products and services using specialized tools. It covers Apigee API Hub Tools for custom APIs, Application Integration Tools for enterprise applications and workflows, and MCP Toolbox for Databases for various data sources. The document provides prerequisites, configuration steps, and code examples for each integration type, including authentication setup.
- [code-exec-agent-engine.md](https://github.com/google/adk-docs/blob/main/docs/tools/google-cloud/code-exec-agent-engine.md): Details the Agent Engine Code Execution ADK Tool, offering a low-latency, sandboxed environment for running AI-generated code within Google Cloud Agent Engine. It highlights persistent state across requests, enabling complex multi-step coding tasks like development and data analysis. The document covers tool usage, how it works, key benefits, system requirements, and configuration parameters.
- [index.md](https://github.com/google/adk-docs/blob/main/docs/tools/index.md): Provides an overview of tools available for ADK agents, categorized into Gemini tools, Google Cloud tools, and third-party tools. It explains how to use pre-built tools and guides users on building custom tools. The page serves as a central hub for discovering and integrating various capabilities into ADK agents.
- [mcp-tools.md](https://github.com/google/adk-docs/blob/main/docs/tools/mcp-tools.md): Guides users on integrating Model Context Protocol (MCP) with ADK, explaining what MCP is and its client-server architecture. It covers two primary integration patterns: using existing MCP servers with ADK agents (ADK as an MCP client) and building MCP servers that expose ADK tools. The document provides detailed examples for file system and Google Maps MCP servers, prerequisites, and deployment considerations.
- [performance.md](https://github.com/google/adk-docs/blob/main/docs/tools/performance.md): Explains how to increase tool performance in ADK through parallel execution of agent-requested function tools. It emphasizes defining tools as asynchronous functions using `async def` and `await` in Python. The guide provides examples for asynchronous HTTP and database calls, yielding behavior for long loops, and using thread pools for CPU-intensive operations, along with tips for writing parallel-ready prompts.
- [index.md](https://github.com/google/adk-docs/blob/main/docs/tools/third-party/index.md): Highlights ADK's extensibility by demonstrating how to seamlessly integrate tools from other AI Agent frameworks like LangChain and CrewAI. It provides examples for using LangChain's Tavily search tool and CrewAI's Serper API tool, detailing installation, instantiation, and integration steps. This allows for faster development and reuse of existing tools.
- [openapi-tools.md](https://github.com/google/adk-docs/blob/main/docs/tools/third-party/openapi-tools.md): Explains how ADK simplifies integrating with external REST APIs by automatically generating callable tools from an OpenAPI Specification (v3.x) using `OpenAPIToolset`. It details the process of parsing the spec, discovering operations, and generating `RestApiTool` instances. The document covers usage workflow, including obtaining the spec, instantiating the toolset, adding it to an agent, and instructing the agent.

## Docs Tools-Custom

- [index.md](https://github.com/google/adk-docs/blob/main/docs/tools-custom/index.md): Introduces custom tools in ADK as programming functions with structured input and output that agents can call to perform actions beyond their core reasoning. It explains what a tool is, its key characteristics, and how agents use them through function calling. The document categorizes tool types into Function Tools, Built-in Tools, and Third-Party Tools, and emphasizes the importance of clear tool instructions and docstrings.

## Docs Tutorials

- [ag-ui.md](https://github.com/google/adk-docs/blob/main/docs/tutorials/ag-ui.md): A tutorial focusing on creating a rich user interface (UI) for applications built using the Google Agent Development Kit (ADK) by leveraging the Agentic UI (AG-UI) protocol. Teaches developers how to implement the AG-UI protocol to serve as a crucial link between the agent's complex backend logic—including multi-step reasoning, tool use, and state management—and the interactive frontend. By integrating the AG-UI protocol with client tools like CopilotKit, developers can build production-ready applications that feature real-time updates, Tool-based Generative UI, and synchronized shared state.
- [agent-team.md](https://github.com/google/adk-docs/blob/main/docs/tutorials/agent-team.md): A comprehensive tutorial on building a progressive weather bot team using ADK, covering advanced features like multi-LLM flexibility, agent delegation, session state for memory, and safety guardrails with callbacks. It guides users through defining tools, creating specialized sub-agents, and orchestrating interactions. The tutorial emphasizes modular design and context-aware agents.
- [index.md](https://github.com/google/adk-docs/blob/main/docs/tutorials/index.md): Provides an overview of practical guides for building agents with the Agent Development Kit (ADK), structured progressively to introduce features and capabilities. Tutorials cover creating multi-tool agents, building agent teams, streaming agents, and agentic UIs. It also links to sample agents for various use cases.

## Examples Python

- [agent.py](https://github.com/google/adk-docs/blob/main/examples/python/agent-samples/youtube-shorts-assistant/agent.py): Demonstrates a YouTube Shorts assistant agent that orchestrates sub-agents (Scriptwriter, Visualizer, Formatter) using LLM reasoning and `AgentTool`. Each sub-agent is an `LlmAgent` with specific instructions and tools, saving its output to session state. This setup allows for a modular workflow where the main agent delegates tasks to specialized sub-agents.
- [loop_agent.py](https://github.com/google/adk-docs/blob/main/examples/python/agent-samples/youtube-shorts-assistant/loop_agent.py): Defines a YouTube Shorts assistant agent utilizing a `LoopAgent` to iteratively execute a workflow involving scriptwriting, visualizing, and formatting sub-agents. The `LoopAgent` is configured with a maximum number of iterations. Each sub-agent is an `LlmAgent` that saves its output to session state.
- [loop_agent_runner.py](https://github.com/google/adk-docs/blob/main/examples/python/agent-samples/youtube-shorts-assistant/loop_agent_runner.py): Illustrates a YouTube Shorts assistant agent built using a `LoopAgent` to iteratively execute a sequence of sub-agents: Scriptwriter, Visualizer, and Formatter. This file also includes the necessary setup for running the agent programmatically, including session and runner initialization. The `LoopAgent` enables repetitive execution of the content creation workflow.
- [util.py](https://github.com/google/adk-docs/blob/main/examples/python/agent-samples/youtube-shorts-assistant/util.py): Defines a utility function `load_instruction_from_file` that reads instruction text from a specified file path. It includes error handling for `FileNotFoundError` and other exceptions, returning a default instruction if the file is not found or an error occurs. The function prints status messages for successful loading or warnings/errors.
- [storyflow_agent.py](https://github.com/google/adk-docs/blob/main/examples/python/snippets/agents/custom-agent/storyflow_agent.py): Demonstrates a custom `StoryFlowAgent` that orchestrates a multi-stage story generation and refinement workflow using conditional logic and sub-agents. It iteratively generates, critiques, revises, and checks grammar and tone. The agent includes conditional regeneration if the tone check is negative, showcasing complex, custom control flow.
- [capital_agent.py](https://github.com/google/adk-docs/blob/main/examples/python/snippets/agents/llm-agent/capital_agent.py): Compares two `LlmAgent` configurations: one using a tool (`get_capital_city`) for capital city lookup and another enforcing a structured JSON output schema (`CapitalInfoOutput`). Both agents are designed to find capital cities. This example highlights the different approaches to structuring agent interactions and outputs.
- [loop_agent_doc_improv_agent.py](https://github.com/google/adk-docs/blob/main/examples/python/snippets/agents/workflow-agents/loop_agent_doc_improv_agent.py): Demonstrates a `LoopAgent` for iterative document refinement, using sub-agents for writing, critiquing, and refining, with an exit tool. The `SequentialAgent` orchestrates the initial writing and the refinement loop. This example showcases how to build complex, iterative workflows with conditional termination using ADK workflow agents.
- [parallel_agent_web_research.py](https://github.com/google/adk-docs/blob/main/examples/python/snippets/agents/workflow-agents/parallel_agent_web_research.py): Demonstrates a `ParallelAgent` for concurrent web research by multiple specialized sub-agents, followed by a `SequentialAgent` for result synthesis. Each researcher `LlmAgent` uses `google_search` and saves its findings to session state. A `SynthesisAgent` then merges these parallel results into a structured report.
- [sequential_agent_code_development_agent.py](https://github.com/google/adk-docs/blob/main/examples/python/snippets/agents/workflow-agents/sequential_agent_code_development_agent.py): Demonstrates a `SequentialAgent` orchestrating a code development pipeline with sub-agents for writing, reviewing, and refactoring code. Each `LlmAgent` in the sequence stores its output in session state, which is then read by the next agent. This example illustrates how to build structured, multi-step processes with clear data flow.
- [after_agent_callback.py](https://github.com/google/adk-docs/blob/main/examples/python/snippets/callbacks/after_agent_callback.py): Demonstrates an `after_agent_callback` that runs immediately after an agent's main processing, allowing inspection or replacement of the agent's final output. The callback checks a session state flag (`add_concluding_note`) to decide whether to use the agent's original output or substitute it with new content. This highlights how `after_` callbacks enable post-processing and modification of agent results.
- [after_model_callback.py](https://github.com/google/adk-docs/blob/main/examples/python/snippets/callbacks/after_model_callback.py): Demonstrates an `after_model_callback` that inspects and conditionally modifies the LLM's response after it's received. The callback checks the original response text for a specific term ('joke') and replaces it with another ('funny story') before the response is processed further. This illustrates how `after_model_callback` can be used for post-processing or sanitizing LLM outputs.
- [after_tool_callback.py](https://github.com/google/adk-docs/blob/main/examples/python/snippets/callbacks/after_tool_callback.py): Demonstrates an `after_tool_callback` that inspects and conditionally modifies the result of a tool call before it is returned to the agent. The callback checks the tool's name and original response, and if specific conditions are met, it returns a modified dictionary. This illustrates how `after_tool_callback` can post-process tool outputs.
- [before_agent_callback.py](https://github.com/google/adk-docs/blob/main/examples/python/snippets/callbacks/before_agent_callback.py): Demonstrates a `before_agent_callback` that runs immediately before an agent's main work, allowing it to conditionally skip the agent's execution based on session state. If a `skip_llm_agent` flag is `True` in the state, the callback returns a `types.Content` object, effectively bypassing the agent's LLM call. This showcases a mechanism for controlling agent flow based on predefined conditions.
- [before_model_callback.py](https://github.com/google/adk-docs/blob/main/examples/python/snippets/callbacks/before_model_callback.py): Demonstrates a `before_model_callback` that can inspect, modify, or block an LLM call based on the user message. The callback adds a prefix to the system instruction and, if a 'BLOCK' keyword is found in the user message, it returns a predefined `LlmResponse`, effectively skipping the actual LLM call. This illustrates implementing input guardrails before model interaction.
- [before_tool_callback.py](https://github.com/google/adk-docs/blob/main/examples/python/snippets/callbacks/before_tool_callback.py): Demonstrates a `before_tool_callback` that can inspect, modify, or block a tool's execution based on its arguments. The callback checks the tool's name and arguments, and for specific conditions (e.g., country 'Canada' or 'BLOCK'), it alters the arguments or returns a predefined result, skipping the actual tool run. This showcases a powerful mechanism for tool-level guardrails.
- [callback_basic.py](https://github.com/google/adk-docs/blob/main/examples/python/snippets/callbacks/callback_basic.py): No summary
- [agent.py](https://github.com/google/adk-docs/blob/main/examples/python/snippets/get-started/google_search_agent/agent.py): Defines a Google Search agent using a Gemini model and the `google_search` tool for answering questions. The agent is instructed to act as an expert researcher and always cite sources. This serves as a basic example of an agent leveraging a built-in tool for external information retrieval.
- [agent.py](https://github.com/google/adk-docs/blob/main/examples/python/snippets/get-started/multi_tool_agent/agent.py): Defines a multi-tool agent (`weather_time_agent`) capable of providing weather and time information for a specified city using two distinct Python functions: `get_weather` and `get_current_time`. The agent is configured with a Gemini model and instructions to use these tools. This serves as a foundational example for agents utilizing multiple capabilities.
- [agent.py](https://github.com/google/adk-docs/blob/main/examples/python/snippets/streaming/adk-streaming-ws/app/google_search_agent/agent.py): Defines a Google Search agent for an ADK streaming application, utilizing a Gemini model and the `google_search` tool. The agent's instruction is to answer questions using the Google Search tool. It serves as the core logic for the streaming app's AI capabilities.
- [main.py](https://github.com/google/adk-docs/blob/main/examples/python/snippets/streaming/adk-streaming-ws/app/main.py): Provides the server-side FastAPI application for an ADK streaming app using WebSockets for bidirectional audio/text communication. It initializes ADK agent sessions, configures response modalities, and manages client communication. The server handles text and Base64-encoded audio data, streaming agent events back to the client.
- [agent.py](https://github.com/google/adk-docs/blob/main/examples/python/snippets/streaming/adk-streaming/app/google_search_agent/agent.py): Defines a Google Search agent for an ADK streaming application, utilizing a Gemini model and the `google_search` tool. The agent's instruction is to answer questions using the Google Search tool. It serves as the core logic for the streaming app's AI capabilities.
- [main.py](https://github.com/google/adk-docs/blob/main/examples/python/snippets/streaming/adk-streaming/app/main.py): Provides the server-side FastAPI application for an ADK streaming app using Server-Sent Events (SSE) for bidirectional audio/text communication. It initializes ADK agent sessions, configures response modalities, and manages client communication. The server handles text and Base64-encoded audio data, streaming agent events back to the client.
- [agent_cli.py](https://github.com/google/adk-docs/blob/main/examples/python/snippets/tools/auth/agent_cli.py): Provides a Python CLI application to orchestrate an ADK agent interaction that includes a simulated OAuth 2.0 authentication flow. It initializes in-memory services, sends an initial query, detects an authentication request, and guides the user through the authorization process. The application then sends the authentication response back to the agent to resume execution.
- [helpers.py](https://github.com/google/adk-docs/blob/main/examples/python/snippets/tools/auth/helpers.py): Contains helper functions for an ADK agent CLI to manage user input and detect/extract authentication request details from events. It includes `get_user_input` for asynchronous console input, `is_pending_auth_event` to identify auth requests, `get_function_call_id` to extract call IDs, and `get_function_call_auth_config` to retrieve authentication configuration.
- [tools_and_agent.py](https://github.com/google/adk-docs/blob/main/examples/python/snippets/tools/auth/tools_and_agent.py): Configures an ADK agent with OpenAPI-generated tools that require OpenID Connect authentication, defining the auth scheme and credentials. It uses `OpenAPIToolset` to integrate tools from a `spec.yaml` file, associating them with the OIDC flow. The agent is instructed to help users with enterprise system integration, including authenticated user information retrieval.
- [bigquery.py](https://github.com/google/adk-docs/blob/main/examples/python/snippets/tools/built-in-tools/bigquery.py): Demonstrates how to use the `BigQueryToolset` in an ADK agent to answer questions and execute SQL queries on BigQuery data. It covers configuring tool settings to block write operations and defining credentials using application default credentials. The agent is designed as a data science assistant with access to BigQuery tools.
- [bigtable.py](https://github.com/google/adk-docs/blob/main/examples/python/snippets/tools/built-in-tools/bigtable.py): Demonstrates how to use the `BigtableToolset` in an ADK agent to interact with Google Cloud Bigtable, including executing SQL queries. It covers defining Bigtable tool settings and credentials, instantiating the toolset, and optionally creating a wrapped function tool for custom queries. The agent is configured with a Gemini model and instructions for data assistance.
- [code_execution.py](https://github.com/google/adk-docs/blob/main/examples/python/snippets/tools/built-in-tools/code_execution.py): Demonstrates using the `BuiltInCodeExecutor` tool within an ADK agent to execute Python code for mathematical calculations. The agent is configured with a Gemini model and instructions to write and execute Python code. It shows how the agent processes queries, generates code, and outputs results from code execution.
- [google_search.py](https://github.com/google/adk-docs/blob/main/examples/python/snippets/tools/built-in-tools/google_search.py): Demonstrates how to use the `google_search` built-in tool within an ADK agent to answer questions by searching the internet. It covers setting up the agent with a Gemini model and the `google_search` tool, along with session and runner setup for interaction. The example shows how the agent leverages the tool for web search capabilities.
- [spanner.py](https://github.com/google/adk-docs/blob/main/examples/python/snippets/tools/built-in-tools/spanner.py): Demonstrates how to use the `SpannerToolset` in an ADK agent to interact with Google Cloud Spanner, including executing SQL queries. It covers defining Spanner tool settings and credentials, instantiating the toolset, and optionally creating a wrapped function tool for custom queries. The agent is configured with a Gemini model and instructions for data assistance.
- [vertexai_rag_engine.py](https://github.com/google/adk-docs/blob/main/examples/python/snippets/tools/built-in-tools/vertexai_rag_engine.py): Demonstrates using the `VertexAiRagRetrieval` tool in an ADK agent to retrieve documentation and reference materials from a Vertex AI RAG corpus. The agent is configured with a Gemini model and instructions to use the retrieval tool. It requires a specified RAG corpus and handles similarity search parameters.
- [vertexai_search.py](https://github.com/google/adk-docs/blob/main/examples/python/snippets/tools/built-in-tools/vertexai_search.py): Demonstrates using the `VertexAiSearchTool` in an ADK agent to answer questions based on information found in a Vertex AI Search datastore. The agent is configured with a Gemini model and instructions to use the search tool and cite sources. It highlights the importance of providing the correct datastore ID and ensuring proper authentication.
- [func_tool.py](https://github.com/google/adk-docs/blob/main/examples/python/snippets/tools/function-tools/func_tool.py): Demonstrates a Python function `get_stock_price` wrapped as a `FunctionTool` to retrieve current stock prices using the `yfinance` library. The `stock_price_agent` is instructed to use this tool, and potentially Google Search for ticker symbols. This example showcases integrating external Python libraries as tools.
- [human_in_the_loop.py](https://github.com/google/adk-docs/blob/main/examples/python/snippets/tools/function-tools/human_in_the_loop.py): Demonstrates a long-running function tool (`ask_for_approval`) for human approval in an ADK agent, showing how to handle pending status and updates. The `reimbursement_agent` uses this tool, and another `reimburse` tool, to manage reimbursement requests based on amount and manager approval. This illustrates human-in-the-loop workflows.
- [summarizer.py](https://github.com/google/adk-docs/blob/main/examples/python/snippets/tools/function-tools/summarizer.py): Demonstrates using an `AgentTool` to delegate summarization tasks to a specialized `summary_agent` within a `root_agent`. The `root_agent` is instructed to use the `summarize` tool for long texts, passing the user's message directly. This illustrates agent-to-agent delegation where one agent acts as a tool for another.
- [openapi_tool.py](https://github.com/google/adk-docs/blob/main/examples/python/snippets/tools/openapi_tool.py): Demonstrates how to generate ADK tools from an OpenAPI specification (JSON string) and integrate them with an `LlmAgent` for API interaction. It uses `OpenAPIToolset` to create `RestApiTool` instances for operations like `listPets` and `createPet`. The example includes agent definition, session setup, and interaction logic to showcase API calls.
- [customer_support_agent.py](https://github.com/google/adk-docs/blob/main/examples/python/snippets/tools/overview/customer_support_agent.py): Demonstrates an ADK agent that uses a `FunctionTool` (`check_and_transfer`) to check for query urgency and transfer the conversation to a specialized support agent. The `main_agent` includes a `support_agent` as a sub-agent for delegation. This illustrates how tools can dynamically influence the conversation flow by transferring control to other agents.
- [doc_analysis.py](https://github.com/google/adk-docs/blob/main/examples/python/snippets/tools/overview/doc_analysis.py): Demonstrates a Python function tool `process_document` that analyzes a document, loads it as an artifact, searches memory for related context, and saves the analysis as a new artifact. It uses `ToolContext` to interact with artifact and memory services. This example showcases advanced tool capabilities involving multiple contextual services.
- [toolset_example.py](https://github.com/google/adk-docs/blob/main/examples/python/snippets/tools/overview/toolset_example.py): Demonstrates creating a `BaseToolset` to group and dynamically provide `FunctionTool` instances (`add_numbers`, `subtract_numbers`) to an ADK agent. The `SimpleMathToolset` customizes tool names with a prefix and can dynamically decide which tools to return. An `LlmAgent` is then configured to use both an individual tool and this toolset.
- [user_preference.py](https://github.com/google/adk-docs/blob/main/examples/python/snippets/tools/overview/user_preference.py): Demonstrates a Python function `update_user_preference` that acts as a tool to update user-specific preferences stored in the session state. It uses `ToolContext` to access and modify the `user:preferences` key in the state. This illustrates how tools can manage and persist user settings across interactions.
- [weather_sentiment.py](https://github.com/google/adk-docs/blob/main/examples/python/snippets/tools/overview/weather_sentiment.py): Demonstrates an ADK agent that uses two `FunctionTool`s: `get_weather_report` and `analyze_sentiment`. The agent's instruction guides it to use the weather tool first, then the sentiment tool based on user feedback. This example illustrates sequential tool usage and how an agent can incorporate multiple capabilities.
- [crewai_serper_search.py](https://github.com/google/adk-docs/blob/main/examples/python/snippets/tools/third-party/crewai_serper_search.py): Demonstrates integrating CrewAI's Serper API search tool into an ADK agent using the `CrewaiTool` wrapper. It covers installing dependencies, setting API keys, instantiating the CrewAI tool, and defining an ADK `Agent` with the wrapped tool. The example shows how to run the agent to find recent news articles.
- [langchain_tavily_search.py](https://github.com/google/adk-docs/blob/main/examples/python/snippets/tools/third-party/langchain_tavily_search.py): Demonstrates integrating LangChain's Tavily search tool into an ADK agent using the `LangchainTool` wrapper. It covers installing dependencies, setting API keys, instantiating the LangChain tool, and defining an ADK `Agent` with the wrapped tool. The example shows how to run the agent to answer questions by searching the internet.
- [readme.md](https://github.com/google/adk-docs/blob/main/examples/python/tutorial/agent_team/adk-tutorial/readme.md): Provides setup instructions for the ADK Progressive Weather Bot tutorial, specifically tailored for use with ADK's command-line tools like `adk web` and `adk run`. It covers cloning the repository, setting up a virtual environment, installing dependencies, and configuring API keys for various LLM providers. The document also explains how to run the examples and notes the exclusion of Step 4's session state demonstration from this version.
- [agent.py](https://github.com/google/adk-docs/blob/main/examples/python/tutorial/agent_team/adk-tutorial/step_1/agent.py): Defines a basic weather agent using a Gemini model, equipped with a `get_weather` tool for specific city weather lookups. The agent's instruction guides it on when and how to use the tool and how to present its findings. This serves as the foundational step in building a more complex agent system.
- [agent.py](https://github.com/google/adk-docs/blob/main/examples/python/tutorial/agent_team/adk-tutorial/step_2 _anthropic/agent.py): Defines a weather agent using Anthropic's Claude Sonnet model via LiteLLM, equipped with a `get_weather` tool. The agent's instruction guides it to use the tool for city weather requests and analyze its dictionary output. This example demonstrates multi-model flexibility within the ADK framework.
- [agent.py](https://github.com/google/adk-docs/blob/main/examples/python/tutorial/agent_team/adk-tutorial/step_2_gpt4/agent.py): Defines a weather agent using OpenAI's GPT-4o model via LiteLLM, equipped with a `get_weather` tool. The agent's instruction guides it to use the tool for city weather requests and present reports or error messages. This example demonstrates multi-model flexibility within the ADK framework.
- [agent.py](https://github.com/google/adk-docs/blob/main/examples/python/tutorial/agent_team/adk-tutorial/step_3/agent.py): Defines a root weather agent that delegates greetings and farewells to specialized sub-agents, also including a `get_weather` tool for its core task. This demonstrates building an agent team with automatic delegation based on user intent. Each sub-agent has a focused instruction and description for effective routing.
- [agent.py](https://github.com/google/adk-docs/blob/main/examples/python/tutorial/agent_team/adk-tutorial/step_5/agent.py): Defines a root weather agent with sub-agents for greetings and farewells, implementing a `before_model_callback` to act as an input guardrail. This callback inspects the user's message for a specific keyword and blocks the LLM call if found. The agent also uses a stateful weather tool.
- [agent.py](https://github.com/google/adk-docs/blob/main/examples/python/tutorial/agent_team/adk-tutorial/step_6/agent.py): Defines a root weather agent that incorporates both `before_model_callback` for input guardrails and `before_tool_callback` for tool argument validation. It includes sub-agents for greetings and farewells, and a stateful weather tool. This example demonstrates advanced safety layers within a multi-agent system.

## Tools Feature-Matrix

- [prompt.md](https://github.com/google/adk-docs/blob/main/tools/feature-matrix/prompt.md): This file contains instructions for generating a feature matrix for the ADK project, specifying criteria for language support and output format. It requests an analysis of ADK documentation to list features and then map their support across Python and Java runtimes, with links to code samples.
- [start.md](https://github.com/google/adk-docs/blob/main/tools/feature-matrix/start.md): Provides a feature support matrix for the Agent Development Kit (ADK), detailing Python and Java support across various categories like Core Agent Architecture, Tooling & Integrations, Runtime & Context, and Advanced Capabilities. Each feature's support status is linked to relevant documentation pages and code samples. The document also includes a disclaimer about its autogenerated nature.

